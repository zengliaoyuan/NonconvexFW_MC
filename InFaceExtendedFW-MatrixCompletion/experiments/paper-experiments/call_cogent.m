function [final_soln_cogent, history_cogent] = call_cogent(mat_comp_instance, svt_param, best_lwbnd_val)
    irow = mat_comp_instance.irow;
    jcol = mat_comp_instance.jcol;
    X_obs_vec = mat_comp_instance.X_obs_vec;
    no_rows = max(irow);
    no_cols = max(jcol);
    no_obs = length(irow);
    delta = mat_comp_instance.delta;
    
    % Construct Phi operator
    Omega = sub2ind([no_rows no_cols], irow, jcol);
    Phi = sparse((1:no_obs)', Omega, ones(no_obs, 1), no_obs, no_rows*no_cols);
    
    selfun = @(gradf) find_next_atom_nucnorm(gradf,no_rows,no_cols);
    
    uinit = randn(no_rows,1); vinit = randn(1,no_cols);
    uinit = uinit/norm(uinit);
    vinit = vinit/norm(vinit);
    Ainit = uinit*vinit;
    Ainit = Ainit(:);
    
    % manually set cogent parameters
    maxiter = 5000;
    maxtime = 800; % 400 for small, 800 for large 
    tol = 10^-2.6;
    eta = 0.5;
    
    gptol = 1e-5;
    gpiter = 50;
    verbose_param = 1;
    
    % Call cogent
    if svt_param == -1
        % don't do SVT
        [x, At, iter, obj, time, back_count] = CoGEnT_MC(X_obs_vec, Phi, delta, Ainit, [no_rows, no_cols], selfun,...
            'maxiter',maxiter,...
            'eta', eta,...
            'gptol', gptol,...
            'gpiter', gpiter,...
            'gp_forward',1,...
            'backward',1,...
            'verbose', verbose_param, ...
            'tol',tol,...
            'debias',0,...
            'best_lwbnd',best_lwbnd_val,...
            'maxtime',maxtime);
    else
        % do SVT
        [x, At, iter, obj, time, back_count] = CoGEnT_MC(X_obs_vec, Phi, delta, Ainit, [no_rows, no_cols], selfun,...
            'maxiter',maxiter,...
            'eta', eta,...
            'gptol', gptol,...
            'gpiter', gpiter,...
            'gp_forward',1,...
            'backward',1,...
            'verbose', verbose_param, ...
            'tol',tol,...
            'debias',0,...
            'svt',svt_param,...
            'best_lwbnd',best_lwbnd_val,...
            'maxtime',maxtime);
    end
    
    final_soln_cogent = x;
    history_cogent = struct();
    history_cogent.num_iters = iter;
    history_cogent.objvals = obj';
    history_cogent.cputimes = time';
    history_cogent.back_count = back_count;
end